{"version":3,"sources":["webpack:///./node_modules/@angular/material/chips/typings/index.d.ts.MatChipList.html","webpack:///./src/app/shared/services/tournament.data.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>","import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, Headers } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { throwError } from \"rxjs\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/catch\";\r\nimport { IResultVM, ITournament } from \"../interfaces/interfaces\";\r\nimport { ConfigService } from \"../utils/config.service\";\r\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\n\r\n@Injectable()\r\nexport class TournamentDataService {\r\n  _baseUrl: string = \"\";\r\n\r\n  constructor(private http: HttpClient, private configService: ConfigService) {\r\n    this._baseUrl = configService.getApiURI();\r\n  }\r\n\r\n  GetAllTournaments(): Observable<IResultVM> {\r\n    const headers = new HttpHeaders();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    return this.http\r\n      .get(this._baseUrl + \"Tournament\", {\r\n        headers: headers\r\n      })\r\n      .map((res: IResultVM) => res)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  GetTournament(id: number): Observable<IResultVM> {\r\n    const headers = new HttpHeaders();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    return this.http\r\n      .get(this._baseUrl + \"tournament/\" + id, {\r\n        headers: headers\r\n      })\r\n      .map((res: IResultVM) => res)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  DeleteTournament(id: number): Observable<IResultVM> {\r\n    const headers = new HttpHeaders();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    return this.http\r\n      .delete(this._baseUrl + \"tournament/\" + id, {\r\n        headers: headers\r\n      })\r\n      .map((res: IResultVM) => res)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  UpdateTournament(tournament: ITournament): Observable<IResultVM> {\r\n    const headers = new HttpHeaders();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    return this.http\r\n      .patch(this._baseUrl + \"tournament/\", tournament, {\r\n        headers: headers\r\n      })\r\n      .map((res: IResultVM) => res)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  CreateTournament(tournament: ITournament): Observable<IResultVM> {\r\n    const headers = new HttpHeaders();\r\n    headers.append(\"Content-Type\", \"application/json\");\r\n    return this.http\r\n      .post(this._baseUrl + \"tournament/\", tournament, {\r\n        headers: headers\r\n      })\r\n      .map((res: IResultVM) => res)\r\n      .catch(this.handleError);\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    const applicationError = error.headers.get(\"Application-Error\");\r\n    const serverError = error.json();\r\n    let modelStateErrors: string = \"\";\r\n\r\n    if (!serverError.type) {\r\n      for (const key in serverError) {\r\n        if (serverError[key]) {\r\n          modelStateErrors += serverError[key] + \"\\n\";\r\n        }\r\n      }\r\n    }\r\n\r\n    modelStateErrors = modelStateErrors = \"\" ? null : modelStateErrors;\r\n    return throwError(applicationError || modelStateErrors || \"Server error\");\r\n  }\r\n}\r\n"],"sourceRoot":""}