// <auto-generated />
using System;
using HWBTournament.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HWBTournament.Data.Migrations
{
    [DbContext(typeof(HWBTournamentContext))]
    [Migration("20190208073811_SecondCreate7")]
    partial class SecondCreate7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HWBTournament.Model.Entities.event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("auto_close")
                        .HasColumnName("AutoClose");

                    b.Property<DateTime>("event_date_time")
                        .HasColumnName("EventDateTime");

                    b.Property<DateTime>("event_end_date_time")
                        .HasColumnName("EventEndDateTime");

                    b.Property<string>("event_name")
                        .IsRequired()
                        .HasColumnName("EventName")
                        .HasMaxLength(100);

                    b.Property<short>("event_number")
                        .HasColumnName("EventNumber");

                    b.Property<int>("tournament_id")
                        .HasColumnName("FK_TournamentID");

                    b.HasKey("Id");

                    b.HasIndex("tournament_id");

                    b.ToTable("Event","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.eventdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("event_detail_name")
                        .IsRequired()
                        .HasColumnName("EventDetailName")
                        .HasMaxLength(50);

                    b.Property<short>("event_detail_number")
                        .HasColumnName("EventDetailNumber");

                    b.Property<decimal>("event_detail_odd")
                        .HasColumnName("EventDetailOdd")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("event_id")
                        .HasColumnName("FK_EventID");

                    b.Property<int>("event_status_id")
                        .HasColumnName("FK_EventDetailStatusID");

                    b.Property<short>("finishing_position")
                        .HasColumnName("FinishingPosition");

                    b.Property<bool>("first_timer")
                        .HasColumnName("FirstTimer");

                    b.HasKey("Id");

                    b.HasIndex("event_id");

                    b.HasIndex("event_status_id");

                    b.ToTable("EventDetail","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.eventdetailstatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventDetailsStatusID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("event_detail_status_name")
                        .IsRequired()
                        .HasColumnName("EventDetailsStatusName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EventDetailStatus","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_created");

                    b.Property<DateTime?>("date_updated");

                    b.Property<string>("description");

                    b.Property<bool>("isactive");

                    b.HasKey("Id");

                    b.ToTable("roles","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TournamentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("tournament_name")
                        .IsRequired()
                        .HasColumnName("TournamentName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Tournament","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.user", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_created");

                    b.Property<DateTime?>("date_updated");

                    b.Property<string>("hashed_password");

                    b.Property<bool>("isactive");

                    b.Property<string>("salt");

                    b.Property<string>("username");

                    b.Property<int>("usr_code");

                    b.HasKey("Id");

                    b.ToTable("users","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.userrole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date_created");

                    b.Property<DateTime?>("date_updated");

                    b.Property<bool>("isactive");

                    b.Property<int>("roleid");

                    b.Property<int>("userid");

                    b.HasKey("Id");

                    b.HasIndex("roleid");

                    b.HasIndex("userid");

                    b.ToTable("userroles","hwb");
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.event", b =>
                {
                    b.HasOne("HWBTournament.Model.Entities.tournament", "tournament")
                        .WithMany("events")
                        .HasForeignKey("tournament_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.eventdetail", b =>
                {
                    b.HasOne("HWBTournament.Model.Entities.event", "event")
                        .WithMany("event_details")
                        .HasForeignKey("event_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HWBTournament.Model.Entities.eventdetailstatus", "event_detail_status")
                        .WithMany("eventdetails")
                        .HasForeignKey("event_status_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HWBTournament.Model.Entities.userrole", b =>
                {
                    b.HasOne("HWBTournament.Model.Entities.role", "role")
                        .WithMany()
                        .HasForeignKey("roleid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HWBTournament.Model.Entities.user")
                        .WithMany("userroles")
                        .HasForeignKey("userid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
